<?php

namespace App\CMSBundle\Repository;

use App\BaseBundle\Repository\BaseRepository;
use App\CMSBundle\Entity\Blog;
use App\CMSBundle\Entity\BlogCategory;
use App\CMSBundle\Entity\BlogTag;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogRepository extends BaseRepository
{

    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Blog::class, "b");
    }

    public function getNoOfBlogsByCategory(BlogCategory $category): int
    {
        $search = new \stdClass();
        $search->category = $category->getId();
        $search->deleted = 0;

        return $this->filter($search, true);
    }

    public function getNoOfBlogsByTag(BlogTag $tag): int
    {
        $search = new \stdClass();
        $search->tag = $tag->getId();
        $search->deleted = 0;

        return $this->filter($search, true);
    }

    public function getRelated(Blog $blog, $limit = 3): array
    {
        $statement = $this->createQueryBuilder('b')
            ->addSelect("-b.tarteb AS HIDDEN inverseTarteb")
            ->leftJoin("b.category", "c")
            ->andWhere("b.deleted IS NULL")
            ->andWhere("b.publish = true")
            ->andWhere("c.publish = true")
            ->andWhere("b.id != :blogId")
            ->setParameter("blogId", $blog->getId())
            ->orderBy("inverseTarteb", "DESC")
            ->setMaxResults($limit);
        if ($blog->getCategory() instanceof BlogCategory) {
            $statement->andWhere("c.id != :categoryId")
                ->setParameter("categoryId", $blog->getCategory()->getId());
        }

        return $statement->getQuery()->getResult();
    }

    protected function getStatement(): QueryBuilder
    {
        return $this->createQueryBuilder('b')
            ->addSelect("-b.tarteb AS HIDDEN inverseTarteb")
            ->addSelect("seo")
            ->addSelect("seoSocials")
            ->addSelect("bTrans")
            ->addSelect("c")
            ->leftJoin("b.category", "c")
            ->leftJoin("b.tags", "t")
            ->leftJoin("b.seo", "seo")
            ->leftJoin("seo.seoSocials", "seoSocials")
            ->leftJoin("b.translations", "bTrans");
    }

    private function filterWhereClause(QueryBuilder $statement, \stdClass $search)
    {
        if (isset($search->string) and \PN\ServiceBundle\Utils\Validate::not_null($search->string)) {
            $statement->andWhere('b.id LIKE :searchTerm '
                .'OR b.title LIKE :searchTerm '
                .'OR b.subtitle LIKE :searchTerm '
            );
            $statement->setParameter('searchTerm', '%'.trim($search->string).'%');
        }


        if (isset($search->category) and $search->category > 0) {
            $statement->andWhere('b.category = :category');
            $statement->setParameter('category', $search->category);
        }

        if (isset($search->tag) and $search->tag > 0) {
            $statement->andWhere('t.id = :tag');
            $statement->setParameter('tag', $search->tag);
        }

        if (isset($search->publish) and (is_bool($search->publish) or in_array($search->publish, [0, 1]))) {
            $statement->andWhere('b.publish = :publish');
            $statement->andWhere('(c.publish = :publish OR c.publish IS NULL)');
            $statement->setParameter('publish', $search->publish);
        }

        if (isset($search->notId) and $search->notId != "") {
            $statement->andWhere('b.id <> :notId');
            $statement->setParameter('notId', $search->notId);
        }

        if (isset($search->featured) and (is_bool($search->featured) or in_array($search->featured, [0, 1]))) {
            $statement->andWhere('b.featured = :featured');
            $statement->setParameter('featured', $search->featured);
        }

        if (isset($search->deleted) and in_array($search->deleted, [0, 1])) {
            if ($search->deleted == 1) {
                $statement->andWhere('b.deleted IS NOT NULL');
            } else {
                $statement->andWhere('b.deleted IS NULL');
            }
        }
    }

    private function filterOrder(QueryBuilder $statement, \stdClass $search): void
    {
        $sortSQL = [
            'b.id',
            'inverseTarteb',
            'b.title',
            'b.subtitle',
            'b.featured',
            'b.created',
        ];

        $this->filterOrderLogic($statement, $search, $sortSQL);
    }


    public function filter($search, $count = false, $startLimit = null, $endLimit = null)
    {
        $statement = $this->getStatement();
        $this->filterWhereClause($statement, $search);

        if ($count) {
            return $this->filterCount($statement);
        }

        $statement->groupBy('b.id');
        $this->filterPagination($statement, $startLimit, $endLimit);
        $this->filterOrder($statement, $search);

        return $statement->getQuery()->execute();
    }


}
