<?php

namespace App\CMSBundle\Repository;

use App\BaseBundle\Repository\BaseRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use App\CMSBundle\Entity\DynamicPage;
use PN\ServiceBundle\Utils\Validate;

/**
 * DynamicPageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DynamicPageRepository extends BaseRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, DynamicPage::class, "d");
    }

    protected function getStatement(): QueryBuilder
    {
        return $this->createQueryBuilder('d')
            ->addSelect("trans")
            ->addSelect("post")
            ->addSelect("postTrans")
            ->addSelect("seo")
            ->addSelect("seoTrans")
            ->leftJoin("d.translations", "trans")
            ->leftJoin("d.post", "post")
            ->leftJoin("post.translations", "postTrans")
            ->leftJoin("d.seo", "seo")
            ->leftJoin("seo.translations", "seoTrans");
    }

    private function filterWhereClause(QueryBuilder $statement, \stdClass $search)
    {
        if (isset($search->string) and Validate::not_null($search->string)) {
            $statement->andWhere('d.id LIKE :searchTerm '
                .'OR d.title LIKE :searchTerm '
            );
            $statement->setParameter('searchTerm', '%'.trim($search->string).'%');
        }

        if (isset($search->title) and $search->title != "") {
            $statement->andWhere('d.title = :title');
            $statement->setParameter('title', $search->title);
        }
    }

    private function filterOrder(QueryBuilder $statement, \stdClass $search): void
    {
        $sortSQL = [
            'd.title',
            'd.created',
        ];

        $this->filterOrderLogic($statement, $search, $sortSQL);
    }

    public function filter($search, $count = false, $startLimit = null, $endLimit = null)
    {
        $statement = $this->getStatement();
        $this->filterWhereClause($statement, $search);

        if ($count) {
            return $this->filterCount($statement);
        }

        $statement->groupBy('d.id');
        $this->filterPagination($statement, $startLimit, $endLimit);
        $this->filterOrder($statement, $search);

        return $statement->getQuery()->execute();
    }
}
