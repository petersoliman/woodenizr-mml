<?php

namespace App\CMSBundle\Repository;

use App\BaseBundle\Repository\BaseRepository;
use App\CMSBundle\Entity\Service;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use PN\ServiceBundle\Utils\Validate;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends BaseRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Service::class, "s");
    }

    public function findAll(): array
    {
        $statement = $this->getStatement();
        $statement->where("s.deleted IS NULL");

        return $statement->getQuery()->execute();
    }

    protected function getStatement(): QueryBuilder
    {
        return $this->createQueryBuilder('s');
    }

    private function filterOrder(QueryBuilder $statement, \stdClass $search): void
    {
        $sortSQL = [
            's.id',
            's.tarteb',
            's.title',
            's.publish',
            's.created',
        ];

        $this->filterOrderLogic($statement, $search, $sortSQL);
    }

    private function filterWhereClause(QueryBuilder $statement, \stdClass $search)
    {
        if (isset($search->string) and Validate::not_null($search->string)) {
            $statement->andWhere('s.id LIKE :searchTerm '
                .'OR s.title LIKE :searchTerm '
            );
            $statement->setParameter('searchTerm', '%'.trim($search->string).'%');
        }

        if (isset($search->publish) and $search->publish != "") {
            $statement->andWhere('s.publish = :publish');
            $statement->setParameter('publish', $search->publish);
        }

        if (isset($search->notId) and $search->notId != "") {
            $statement->andWhere('s.id <> :notId');
            $statement->setParameter('notId', $search->notId);
        }


        if (isset($search->deleted) and in_array($search->deleted, [0, 1])) {
            if ($search->deleted == 1) {
                $statement->andWhere('s.deleted IS NOT NULL');
            } else {
                $statement->andWhere('s.deleted IS NULL');
            }
        }
    }

    public function filter($search, $count = false, $startLimit = null, $endLimit = null)
    {
        $statement = $this->getStatement();
        $this->filterWhereClause($statement, $search);

        if ($count) {
            return $this->filterCount($statement);
        }

        $statement->groupBy('s.id');
        $this->filterPagination($statement, $startLimit, $endLimit);
        $this->filterOrder($statement, $search);

        return $statement->getQuery()->execute();
    }

    public function getProjectsIdsUsingService(Service $service)
    {
        $em = $this->getEntityManager();
        $serviceId = $service->getId();

        $sql = "SELECT project_id
                FROM projects_services
                WHERE service_id = $serviceId";

        $statement = $em->getConnection()->prepare($sql);
        $results = $statement->executeQuery()->fetchAllAssociative();

        $ids = [];
        if (!empty($results)) {
            foreach ($results as $result) {
                $ids[] = $result["project_id"];
            }
        }

        return $ids;
    }

}
