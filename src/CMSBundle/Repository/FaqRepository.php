<?php

namespace App\CMSBundle\Repository;

use App\BaseBundle\Repository\BaseRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use App\CMSBundle\Entity\Faq;
use PN\ServiceBundle\Utils\SQL;
use PN\ServiceBundle\Utils\Validate;

/**
 * FaqRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FaqRepository extends BaseRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Faq::class, "f");
    }

    protected function getStatement(): QueryBuilder
    {
        return $this->createQueryBuilder('f');
    }
    private function filterOrder(QueryBuilder $statement, \stdClass $search): void
    {
        $sortSQL = [
            'f.question',
            'f.answer',
            'f.publish',
            'f.created',
        ];

        $this->filterOrderLogic($statement, $search, $sortSQL);
    }
    private function filterWhereClause(QueryBuilder $statement, \stdClass $search): void
    {
        if (isset($search->string) and Validate::not_null($search->string)) {
            $statement->andWhere('f.id LIKE :searchTerm '
                .'OR f.question LIKE :searchTerm '
            );
            $statement->setParameter('searchTerm', '%'.trim($search->string).'%');
        }


        if (isset($search->publish) and $search->publish != "") {
            $statement->andWhere('f.publish = :publish');
            $statement->setParameter('publish', $search->publish);
        }
    }

    public function filter($search, $count = false, $startLimit = null, $endLimit = null)
    {
        $statement = $this->getStatement();
        $this->filterWhereClause($statement, $search);

        if ($count) {
            return $this->filterCount($statement);
        }

        $statement->groupBy('f.id');
        $this->filterPagination($statement, $startLimit, $endLimit);
        $this->filterOrder($statement, $search);

        return $statement->getQuery()->execute();
    }
}
