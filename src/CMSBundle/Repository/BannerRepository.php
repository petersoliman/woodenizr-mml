<?php

namespace App\CMSBundle\Repository;

use App\BaseBundle\Repository\BaseRepository;
use App\CMSBundle\Entity\Banner;
use App\CMSBundle\Enum\BannerPlacementEnum;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use PN\ServiceBundle\Utils\Validate;

/**
 * BannerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BannerRepository extends BaseRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Banner::class, "b");
    }

    public function getRandBanner(BannerPlacementEnum $placement, $limit): array
    {
        $statement = $this->getStatement()
            ->andWhere("b.image IS NOT NULL")
            ->andWhere("b.placement = :placement")
            ->andWhere("b.publish = :publish")
            ->setParameter("placement", $placement->value)
            ->setParameter("publish", true)
            ->orderBy("RAND()")
            ->setMaxResults($limit);
        //        if ($limit == 1) {
        //            return $statement->getQuery()->getOneOrNullResult();
        //        }
        return $statement->getQuery()->execute();
    }

    protected function getStatement(): QueryBuilder
    {
        return $this->createQueryBuilder('b')
            ->addSelect("-b.tarteb AS HIDDEN inverseTarteb")
            ->addSelect("i")
            ->addSelect("trans")
            ->addSelect("transLang")
            ->leftJoin("b.image", "i")
            ->leftJoin("b.translations", "trans")
            ->leftJoin("trans.language", "transLang");
    }

    private function filterWhereClause(QueryBuilder $statement, \stdClass $search): void
    {
        if (isset($search->string) and Validate::not_null($search->string)) {
            $statement->andWhere('b.id LIKE :searchTerm '
                . 'OR b.title LIKE :searchTerm '
                . 'OR b.placementName LIKE :searchTerm '
            );
            $statement->setParameter('searchTerm', '%' . trim($search->string) . '%');
        }

        if (isset($search->title) and $search->title != "") {
            $statement->andWhere('b.title = :title');
            $statement->setParameter('title', $search->title);
        }

        if (isset($search->publish) and $search->publish != "") {
            $statement->andWhere('b.publish = :publish');
            $statement->setParameter('publish', $search->publish);
        }

        if (isset($search->placement) and $search->placement != "") {
            $statement->andWhere('b.placement = :placement');
            $statement->setParameter('placement', $search->placement);
        }

        if (isset($search->subTitle) and $search->subTitle != "") {
            $statement->andWhere('b.subTitle = :subTitle');
            $statement->setParameter('subTitle', $search->subTitle);
        }
    }

    private function filterOrder(QueryBuilder $statement, \stdClass $search): void
    {
        $sortSQL = [
            'inverseTarteb',
            'b.title',
            'b.placementName',
            'b.openInNewTab',
            'b.image',
            'b.image',
            'b.published',
            'b.created',
        ];

        $this->filterOrderLogic($statement, $search, $sortSQL);
    }


    public function filter($search, $count = false, $startLimit = null, $endLimit = null)
    {
        $statement = $this->getStatement();
        $this->filterWhereClause($statement, $search);

        if ($count) {
            return $this->filterCount($statement);
        }

        $statement->groupBy('b.id');
        $this->filterPagination($statement, $startLimit, $endLimit);
        $this->filterOrder($statement, $search);

        return $statement->getQuery()->execute();
    }
}
