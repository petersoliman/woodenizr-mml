<?php

namespace App\ProductBundle\Repository;

use App\BaseBundle\Repository\BaseRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use App\ProductBundle\Entity\Attribute;
use App\ProductBundle\Entity\Product;
use App\ProductBundle\Entity\ProductHasAttribute;
use App\ProductBundle\Entity\SubAttribute;

/**
 * ProductHasAttributeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductHasAttributeRepository extends BaseRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, ProductHasAttribute::class, "pha");
    }

    public function removeByProduct(Product $product)
    {
        return $this->createQueryBuilder("pha")
            ->delete()
            ->andWhere("pha.product = :productId")
            ->setParameter("productId", $product->getId())
            ->getQuery()->execute();
    }

    protected function getStatement(): QueryBuilder
    {
        return $this->createQueryBuilder('pha')
            ->leftJoin("pha.attribute", "a");
    }

    public function countBySubAttribute(SubAttribute $subAttribute)
    {
        return $this->getStatement()
            ->select("COUNT(pha.id)")
            ->leftJoin("pha.product", "p")
            ->andWhere("pha.subAttribute=:subAttributeId")
            ->andWhere("p.deleted IS NULL")
            ->setParameter("subAttributeId", $subAttribute->getId())
            ->getQuery()
            ->getSingleScalarResult();
    }

    //NOT TESTED
    public function countByAttribute(Attribute $attribute)
    {
        return $this->getStatement()
            ->select("COUNT(pha.id)")
            ->leftJoin("pha.product", "p")
            ->andWhere("pha.attribute=:attributeId")
            ->andWhere("p.deleted IS NULL")
            ->setParameter("attributeId", $attribute->getId())
            ->getQuery()
            ->getSingleScalarResult();
    }

    //NOT TESTED
    public function countByProductId(Product $product)
    {
        return $this->getStatement()
            ->select("COUNT(pha.id)")
            ->leftJoin("pha.product", "p")
            ->andWhere("pha.product=:productId")
            ->andWhere("p.deleted IS NULL")
            ->setParameter("productId", $product->getId())
            ->getQuery()
            ->getSingleScalarResult();

    }

    public function findProduct(Product $product)
    {
        return $this->getStatement()
            ->addSelect("-a.tarteb AS HIDDEN inverseTarteb")
            ->where("pha.product=:productId")
            ->setParameter("productId", $product->getId())
            ->orderBy("inverseTarteb", "DESC")
            ->getQuery()
            ->getResult();
    }

}
