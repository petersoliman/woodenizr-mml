<?php

namespace App\ProductBundle\Repository;

use App\BaseBundle\Repository\BaseRepository;
use App\ProductBundle\Entity\Attribute;
use App\ProductBundle\Entity\Category;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use PN\ServiceBundle\Utils\Validate;

/**
 * AttributeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttributeRepository extends BaseRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Attribute::class, "a");
    }

    public function findByCategory(Category $category)
    {
        $search = new \stdClass();
        $search->deleted = 0;
        $search->ordr = ["column" => 0, "dir" => "ASC"];
        $search->category = $category->getId();

        return $this->filter($search);
    }


    protected function getStatement(): QueryBuilder
    {
        return $this->createQueryBuilder('a');
    }

    private function filterOrder(QueryBuilder $statement, \stdClass $search): void
    {
        $sortSQL = [
            "a.id",
            "a.tarteb",
            "a.title",
            "a.type",
            "a.search",
            "a.mandatory",
        ];

        $this->filterOrderLogic($statement, $search, $sortSQL);
    }

    private function filterWhereClause(QueryBuilder $statement, \stdClass $search)
    {
        if (isset($search->string) and Validate::not_null($search->string)) {
            $statement->andWhere('a.id LIKE :searchTerm '
                .'OR a.title LIKE :searchTerm '
            );
            $statement->setParameter('searchTerm', '%'.trim($search->string).'%');
        }

        if (isset($search->id) and $search->id > 0) {
            $statement->andWhere('a.id = :id');
            $statement->setParameter('id', $search->id);
        }
        if (isset($search->category) and $search->category > 0) {
            $statement->andWhere('a.category = :category');
            $statement->setParameter('category', $search->category);
        }


        if (isset($search->deleted) and in_array($search->deleted, [0, 1])) {
            if ($search->deleted == 1) {
                $statement->andWhere('a.deleted IS NOT NULL');
            } else {
                $statement->andWhere('a.deleted IS NULL');
            }
        }
    }

    public function filter($search, $count = false, $startLimit = null, $endLimit = null)
    {
        $statement = $this->getStatement();
        $this->filterWhereClause($statement, $search);

        if ($count) {
            return $this->filterCount($statement);
        }

        $statement->groupBy('a.id');
        $this->filterPagination($statement, $startLimit, $endLimit);
        $this->filterOrder($statement, $search);

        return $statement->getQuery()->execute();
    }
}
