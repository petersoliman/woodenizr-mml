<?php

namespace App\ProductBundle\Repository;

use App\BaseBundle\Repository\BaseRepository;
use App\ProductBundle\Entity\Category;
use App\ProductBundle\Entity\Collection;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use PN\ServiceBundle\Utils\Validate;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends BaseRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Category::class, "c");
    }

    public function getCategoryOptions(): array
    {
        $mainCategory = $this->findBy(['parent' => null, 'deleted' => null]);

        $list = [];
        foreach ($mainCategory as $cat) {
            $list[$cat->getTitle()] = [];

            $children = $this->createQueryBuilder($this->tableAlias)
                ->where("{$this->tableAlias}.parent = :parentId")
                ->andWhere("{$this->tableAlias}.deleted IS NULL")
                ->setParameter('parentId', $cat->getId())
                ->orderBy("{$this->tableAlias}.tarteb", "DESC")
                ->addOrderBy("{$this->tableAlias}.title", "ASC")
                ->getQuery()
                ->execute();

            foreach ($children as $sub) {
                $list[$cat->getTitle()][$sub->getId()] = $sub;
            }
        }

        return $list;
    }

    public function getCategoriesByCollection(Collection $collection)
    {
        $statement = $this->createQueryBuilder($this->tableAlias)
            ->where("col.id = :collectionId")
            ->andWhere("{$this->tableAlias}.deleted IS NULL")
            ->setParameter("collectionId", $collection->getId())
            ->groupBy("{$this->tableAlias}.id");

        return $statement->getQuery()->execute();
    }

    protected function getStatement(): QueryBuilder
    {
        return $this->createQueryBuilder($this->tableAlias)
            ->addSelect("-{$this->tableAlias}.tarteb AS HIDDEN inverseTarteb")
            ->addSelect("cTrans")
            ->addSelect("seo")
            ->addSelect("seoTrans")
            ->addSelect("i")
            ->addSelect("post")
            ->addSelect("postTrans")
            ->leftJoin("{$this->tableAlias}.image", 'i')
            ->leftJoin("{$this->tableAlias}.translations", "cTrans")
            ->leftJoin("{$this->tableAlias}.seo", "seo")
            ->leftJoin("seo.translations", "seoTrans")
            ->leftJoin("{$this->tableAlias}.post", "post")
            ->leftJoin("post.translations", "postTrans");
    }

    private function filterOrder(QueryBuilder $statement, \stdClass $search): void
    {
        $sortSQL = [
            "{$this->tableAlias}.id",
            "inverseTarteb",
            "{$this->tableAlias}.title",
            "{$this->tableAlias}.noOfProducts",
            "{$this->tableAlias}.noOfPublishProducts",
            "{$this->tableAlias}.publish",
            "{$this->tableAlias}.created",
        ];

        $this->filterOrderLogic($statement, $search, $sortSQL);
        
        // Add secondary sorting: if no specific order is requested, sort by tarteb first (1 = highest priority), then alphabetically
        if (!isset($search->ordr) || !Validate::not_null($search->ordr)) {
            $statement->addOrderBy("{$this->tableAlias}.tarteb", "DESC");
            $statement->addOrderBy("{$this->tableAlias}.title", "ASC");
        }
    }


    private function filterWhereClause(QueryBuilder $statement, \stdClass $search): void
    {
        if (isset($search->string) and Validate::not_null($search->string)) {
            $statement->andWhere("{$this->tableAlias}.id LIKE :searchTerm "
                . "OR {$this->tableAlias}title LIKE :searchTerm "
            );
            $statement->setParameter('searchTerm', '%' . trim($search->string) . '%');
        }

        if (isset($search->parent) and $search->parent != "") {
            $statement->andWhere("{$this->tableAlias}.parent = :parent");
            $statement->setParameter('parent', $search->parent);
        } elseif (isset($search->parent) and $search->parent === "") {
            $statement->andWhere("{$this->tableAlias}.parent IS NULL");
        }

        if (isset($search->hasProducts) and $search->hasProducts === true) {
            $statement->andHaving("noOfProducts > 0");
        }

        if (isset($search->hasPublishProduct) and $search->hasPublishProduct == true) {
            $statement->andWhere('c.noOfPublishProducts > 0');
        }

        if (isset($search->publish) and (is_bool($search->publish) or in_array($search->publish, [0, 1]))) {
            $statement->andWhere("{$this->tableAlias}.publish = :publish");
            $statement->setParameter('publish', $search->publish);
        }

        if (isset($search->ids) and is_array($search->ids)) {
            $statement->andWhere("{$this->tableAlias}.id IN (:ids)");
            $statement->setParameter('ids', $search->ids);
        }

        if (isset($search->deleted) and in_array($search->deleted, [0, 1])) {
            if ($search->deleted == 1) {
                $statement->andWhere("{$this->tableAlias}.deleted IS NOT NULL");
            } else {
                $statement->andWhere("{$this->tableAlias}.deleted IS NULL");
            }
        }
    }

    public function filter($search, $count = false, $startLimit = null, $endLimit = null)
    {
        $statement = $this->getStatement();
        $this->filterWhereClause($statement, $search);

        if ($count) {
            return $this->filterCount($statement);
        }

        $statement->groupBy("{$this->tableAlias}.id");
        $this->filterPagination($statement, $startLimit, $endLimit);
        $this->filterOrder($statement, $search);

        return $statement->getQuery()->execute();
    }


}
